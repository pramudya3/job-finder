// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "job-finder/internal/company/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, company
func (_m *CompanyRepository) Create(ctx context.Context, company *model.Company) error {
	ret := _m.Called(ctx, company)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, companyID
func (_m *CompanyRepository) Delete(ctx context.Context, companyID uuid.UUID) error {
	ret := _m.Called(ctx, companyID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, companyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, companyID
func (_m *CompanyRepository) FindByID(ctx context.Context, companyID uuid.UUID) (*model.Company, error) {
	ret := _m.Called(ctx, companyID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Company, error)); ok {
		return rf(ctx, companyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Company); ok {
		r0 = rf(ctx, companyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, companyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCompanyRepository creates a new instance of CompanyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompanyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompanyRepository {
	mock := &CompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
